h1. Introduction

GeoGeometry is a set of tools for manipulating geometric shapes in the wgs 84 coordinate system and for covering them with geo hashes for indexing purposes. 

A geo hash is a representation of a coordinate that interleaves the bit representations of the latitude and longitude and base32 encodes the result. This string representation has a very useful property: geo hashes of nearby coordinates will have the same prefix. As is observed in this blog post: http://blog.notdot.net/2009/11/Damn-Cool-Algorithms-Spatial-indexing-with-Quadtrees-and-Hilbert-Curves, geo hashes effectively encode the path to a leaf in a quad tree.

The algorithms used for implementing the functionality in GeoGeometry are mostly well known and commonly used in 2D graphics. Despite the existence of many libraries, most come with complicated, object oriented frameworks. This is fine when used in isolation but I found myself needing to translate between different frameworks quite a bit and was looking for something without the OO cruft and more in line with the geojson style of representing different shapes as double arrays.

Note. geogeometry was formerly known as geotools. I renamed the project because the name was already in use by geotools.org, which predates this project and on top of that delivers very similar functionality for Java. 

h1. Features

* GeoGeometry class with methods that allow you to:
** Calculate distance between two coordinates using the haversine algorithm.
** Calculate distance of a point to a line. lineString, and polygon
** check bounding box containment for a point
** check polygon containment for a point
** get the center for a polygon
** get bounding box for a polygon
** convert circle to a polygon
** create a polygon from a point cloud
** translate a wgs84 coordinate by x & y meters along the latitude and longitude
* GeoHashUtils class with methods that allow you to: 
** encode and decode geo hashes; this functionality has been adapted from the original Apache Lucene implementation of this class.
** check containment of a point in a geohash
** find out the boundingbox of a geohash
** find out neighboring geohashes east, west, south, or north of a geohash
** get the 32 sub geo hashes for a geohash, or the north/south halves, or the NE, NW, SE, SW quarters.
** cover lines, paths, polygons, or circles with geo hashes

I've deliberately kept the design simple and non object oriented. These classes have no external dependencies and only use the java.util package and the java.lang.Math class. Consequently it should be easy to port this functionality to whatever other language. Especially, I've not attempted to implement Point, Polygon, Path, Circle, or other classes to support this library. The reason for this is very simple: these things are commonly implemented in other frameworks and any attempt from my side to impose my own implementation would conflict with the need of others to reuse their own classes. I think it is somewhat of a design smell that world + dog feels compelled to implement their own Point class. 

So instead, a point is represented as a latitude, longitude pair of doubles or as an array of two doubles (like in geojson). Likewise, paths and polygons are represented as arrays of points. A circle is a point and a radius. This should enable anyone to integrate this functionality easily.

h1. Caveats

* Some of the algorithms used have limitations with respect to where you can use them. Generally things should be fine around the date line (if not report bugs). However, the poles are tricky and some of the algorithms get inaccurate or simply fail to exit. Because most data sets lack data for the poles, this should not be a big issue for most. Some of the algorithms now throw an exception if you try this. I'm not currently planning a fix but would appreciate pull requests for this.
* There is currently not a whole lot of input validation in this library. That means some of the algorithms might do unexpected things if you call them in the wrong way. Input validation would make using this library more expensive and that is something I'm trying to avoid.
* Some of the algorithms have quadratic or exponential complexity and you can easily trigger situations where execution time is going to be substantial and/or you run out of memory. For example covering a circle with a radius of a few hundred kilometers with geohashes of length 10 is probably not a great idea. If you are unsure, use getSuitableHashLength() and add 1 or 2 to get good enough granularity.

h1. Installation

It's a maven project. So, checking it out and doing a mvn clean install should do the trick.

Alternatively, you can exercise your rights under the license and simply copy and adapt as needed. The "license":https://github.com/jillesvangurp/geogeometry/blob/master/LICENSE allows you to do this and I have no problems with this although I do appreciate attribution.

Should anyone like this licensed differently, please contact me.

If you like to use pre-built jars, you can utilize my private maven repository as explained "here":http://www.jillesvangurp.com/2013/02/27/maven-and-my-github-projects/

If anyone wants to fix stuff just send me a pull request.

h1. License

Like all my other projects, this project is licensed under the so-called MIT license. However, GeoHashUtils.java was copied and adapted from Apache Lucene and I have retained the Apache License for that file, as required in that license. Both licenses are compatible and should also pose no issues when used with software under most other OSS licenses.

For more details see the LICENSE file

h1. Changelog

* 2.7-2.9
** fix subtle bug with perpendicular distance to line for horizontal lines and polygons
** add implementation of Douglas Peucker to simplify polygons with large amounts of segments
** add methods to calculate bounding boxes for all shape types, add method to calculate area for bounding box
** close polygon with the starting point when calculating a polygon for a point cloud
* 2.6
** add function to calculate polygon area
** fix distance calculation bug with line segments (was incorrectly using intersection outside segment)
** fix east/west bug on 180 longitude since encode can no longer work with invalid longitudes
* 2.1
** Add distance functions for lines, lineStrings, and polygons.
* 2.0 - Geojson & project rename: geotools becomes geogeometry
** There was an existing, high profile project out there called geotools. So I renamed my project to geogeometry.
** Adapt the API to comply with geojson wherever possible. This means polygons are 3d arrays and points are [longitude,latitude] instead of the other way around. This is a major, API breaking change that mostly affects GeoGeometry.
** Clean up API
* 1.5
** misc bug fixes
** close circle polygon with start coordinate
** expandPolygon, contains, and overlaps methods added
** add some ifs to prevent infinite loops near the poles
** method to filter point clouds by dropping the x% furthest points

* 1.4
** many bug fixes & misc refactoring
** improve covering polygon with geohashes
** improve getSuitableHashLength
** add method to convert degrees with minutes and seconds to their decimal equivalent
** replace the algorithm for calculating a polygon from points with a better one
** simple method for calculating centroid of a polygon
* 1.3
** Fix major bug that happens nea longitude 180, several methods were affected by this one.
** Remove dependency on java 1.7; should now work fine with 1.6 as well. I may revert this at some point.
** isEast,isWest,isNorth,isSouth methods added
* 1.2
** Vastly expanded functionality in both classes to support basic geometric shapes and covering those with geo hashes.
** Major refactoring and code and API cleanup
* 1.1
** Added GeoGeometry class for manipulating bounding boxes and polygons of wgs 84 coordinates
** Improved GeoHashUtils with several new methods
** Merged GeoDistance into GeoGeometry
* 1.0
** first release of GeoTools

