buildscript {
    ext {
        kotlinVersion = '1.3.71'
        slf4jVersion = '1.7.26'
    }

    repositories {
        jcenter()
    }

    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.10.1"
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.28.0' // gradle dependencyUpdates -Drevision=release
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.28.1'
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'project-report' // useful for gradle htmlDependencyReport
apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'com.github.ben-manes.versions'

// this intentionally breaks the build if you mess up the formatting; pro tip: use Save Actions plugin in intellij and auto format and organize imports on save
spotless {
    java {
        removeUnusedImports() // removes any unused imports
    }
    // to fix violations: gradle spotlessApply
    // in intellij also tweak kotlin imports to require 999 imports before wildcards and remove java.util for always using wildcards
    // do the same for java imports
    // wildcards are verboten!
    // currentlyb breaks offline build due to fucked up transitive dependency on ktlint & kotlin
    kotlin {
        // optionally takes a version
        ktlint()
    }
}

afterEvaluate {
    // just ffing run it, way to anal to break the build every time
    tasks.getByName('spotlessCheck').dependsOn(tasks.getByName('spotlessApply'))
}

dokka {
    configuration {
        jdkVersion = 8
        includes = ['src/main/kotlin/io/inbot/eskotlinwrapper/module.md']
    }
    outputFormat = 'gfm'
    outputDirectory = 'docs'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        // for whatever reason defaults to 1.6. But since we don't care about android ...
        jvmTarget = "1.8"
    }
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    test.java.srcDirs += 'src/test/kotlin'
}

repositories {
    jcenter()
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.6"
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.6"
    }
}

task testng(type: Test) {
    useTestNG()
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        exceptionFormat = 'full'
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

check.dependsOn testng

test {
    useTestNG()
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        exceptionFormat = 'full'
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

dependencies {
    // our only run time dependency is the kotlin-stdlib, which works on any platform
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"

    // test runner
    testImplementation 'io.kotest:kotest-runner-junit5:4.0.2' // for kotest framework
    testImplementation 'io.kotest:kotest-assertions-core-jvm:4.0.2' // for kotest core jvm assertions
    testCompile 'org.testng:testng:7.2.0'
    testCompile 'org.hamcrest:hamcrest-all:1.3'

    // kotlintest runner needs this to enable logging
    testCompile "org.slf4j:slf4j-api:${slf4jVersion}"
    testCompile "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
    testCompile "org.slf4j:log4j-over-slf4j:${slf4jVersion}"
    testCompile "org.slf4j:jul-to-slf4j:${slf4jVersion}"
    testCompile "ch.qos.logback:logback-classic:1.2.3"

    implementation "com.google.code.gson:gson:2.8.5"

}
